using System;
using System.Globalization;
using System.IO;
using System.Linq;
using Moss.NET.Sdk;
using Moss.NET.Sdk.Scheduler;
using Moss.NET.Sdk.Storage;
using UglyToad.PdfPig.Content;
using UglyToad.PdfPig.Core;
using UglyToad.PdfPig.Fonts.Standard14Fonts;
using UglyToad.PdfPig.Outline;
using UglyToad.PdfPig.Outline.Destinations;
using UglyToad.PdfPig.Writer;

namespace Totletheyn.Jobs;

public enum FontSize
{
    Headline = 75,
    HeaderInfo = 15,
    SidebarH2 = 29,
    MainContentH2 = 29,
    ExtraContentH2 = 29,
    ArticleH3 = 24,
    ArticleP = 16,
    Footer = 10
}

public class RssJob : Job
{
    private static readonly LoggerInstance _logger = Log.GetLogger<RssJob>();
    private DateTimeOffset _lastUpdated;
    private int issue = 1;

    public override void Init()
    {
        if (Data is not null)
        {
            issue = (int)Data;
        }

        //_lastUpdated = (DateTimeOffset)Data;
    }

    public override void Run()
    {
        _lastUpdated = DateTimeOffset.UtcNow;
        _logger.Info($"Running RssJob with '{Options.feeds.Length}' feeds.");

        var builder = new PdfDocumentBuilder();

        builder.DocumentInformation.Author = Options.author ?? "Totletheyn";
        builder.DocumentInformation.Title = "Issue #" + issue;
        builder.DocumentInformation.CreationDate = DateTime.UtcNow.ToString(CultureInfo.InvariantCulture);

        var page = builder.AddPage(PageSize.A4, false);
        builder.Bookmarks = new([
            new DocumentBookmarkNode("Cover",0, new ExplicitDestination(1, ExplicitDestinationType.FitPage, ExplicitDestinationCoordinates.Empty), [])
        ]);

        //page.SetStrokeColor(100, 100, 100);
       // page.DrawRectangle(new PdfPoint(0,0), page.PageSize.Width, page.PageSize.Height, fill: true);

        var headlineFont = builder.AddTrueTypeFont(File.ReadAllBytes("extension/Assets/fonts/Jaini-Regular.ttf")); //builder.AddStandard14Font(Standard14Font.Helvetica);
        var textFont = builder.AddTrueTypeFont(File.ReadAllBytes("extension/Assets/fonts/NoticiaText-Regular.ttf"));

        AddHeader(page, headlineFont, textFont);
        AddFooter(page, textFont);

        _logger.Info($"Saving generated feed to {Options.folder}");
        var notebook = new PdfNotebook( builder.DocumentInformation.Title, builder.Build(), Options.folder);
        notebook.Upload();

        /*
        foreach (string url in Options.feeds)
        {
            var feed = FeedReader.Read(url);

            foreach (var item in feed.Items)
                if (item.PublishingDate > _lastUpdated)
                    writer.AddChapter(item.Title, item.Description);
        }
        */
    }

    private const int hlineMargin = 10;

    private static void AddFooter(PdfPageBuilder page, PdfDocumentBuilder.AddedFont textFont)
    {
        page.DrawLine(new PdfPoint(hlineMargin, 20),
            new PdfPoint(page.PageSize.Width - hlineMargin, 20), 1.0f);

        page.AddText("Generated by Totletheyn on Moss", (int)FontSize.Footer, new PdfPoint(hlineMargin, 10), textFont);
    }

    private static void AddHeader(PdfPageBuilder page, PdfDocumentBuilder.AddedFont headlineFont, PdfDocumentBuilder.AddedFont textFont)
    {
        var headerText = "Daily E-Book Times";
        var headerLeft = 200;

        var headerLetters = page.AddText(headerText, (int)FontSize.Headline,
            new PdfPoint(headerLeft, page.PageSize.Height - (int)FontSize.Headline), headlineFont);

        page.DrawLine(new PdfPoint(hlineMargin, page.PageSize.Height - headerLetters[0].PointSize - 20),
                    new PdfPoint(page.PageSize.Width - hlineMargin, page.PageSize.Height - headerLetters[0].PointSize - 20), 1.0f);

        var headerInfoY = page.PageSize.Height - headerLetters[0].PointSize - 40;
        page.AddText("Issue #1", (int)FontSize.HeaderInfo, new PdfPoint(hlineMargin, headerInfoY), textFont);

        // Date with day of week
        page.AddText(DateTime.Now.ToString("dddd, MMMM dd, yyyy"), (int)FontSize.HeaderInfo,
            new PdfPoint(page.PageSize.Width / 2 - 100, headerInfoY), textFont);

        var rssIconRec = new PdfRectangle(
            page.PageSize.Width - hlineMargin - 50,
            headerInfoY,
            page.PageSize.Width - hlineMargin - 10,
            headerInfoY);
        var rssIcon = page.AddPng(new MemoryStream(File.ReadAllBytes("extension/Assets/images/rss.png")), rssIconRec);
        page.AddImage(rssIcon, rssIconRec);

        page.DrawLine(new PdfPoint(hlineMargin, page.PageSize.Height - headerLetters[0].PointSize - 50),
            new PdfPoint(page.PageSize.Width - hlineMargin, page.PageSize.Height - headerLetters[0].PointSize - 50), 1.0f);
    }

    public override void Shutdown()
    {
        Data = issue;
    }
}