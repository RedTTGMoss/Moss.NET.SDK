using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using Moss.NET.Sdk.Core;
using Moss.NET.Sdk.Storage;
using Totletheyn.Core.RSS;
using UglyToad.PdfPig.Content;
using UglyToad.PdfPig.Core;
using UglyToad.PdfPig.Outline;
using UglyToad.PdfPig.Outline.Destinations;
using UglyToad.PdfPig.Writer;

namespace Totletheyn.Jobs;

class Newspaper(int issue, string? author)
{
    public List<Feed> Feeds { get; } = [];
    public List<FeedItem> Items { get; } = [];

    private readonly PdfDocumentBuilder builder = new();

    private Base64 Render()
    {
        builder.DocumentInformation.Author = author;
        builder.DocumentInformation.Title = "Issue #" + issue;
        builder.DocumentInformation.CreationDate = DateTime.UtcNow.ToString(CultureInfo.InvariantCulture);

        builder.Bookmarks = new([
            new DocumentBookmarkNode("Cover",0, new ExplicitDestination(1, ExplicitDestinationType.FitPage, ExplicitDestinationCoordinates.Empty), [])
        ]);

        var headlineFont = builder.AddTrueTypeFont(File.ReadAllBytes("extension/Assets/fonts/Jaini-Regular.ttf")); //builder.AddStandard14Font(Standard14Font.Helvetica);
        var textFont = builder.AddTrueTypeFont(File.ReadAllBytes("extension/Assets/fonts/NoticiaText-Regular.ttf"));

        var page = builder.AddPage(PageSize.A4, false);
        AddCoverHeader(page, headlineFont, textFont);
        AddFooter(page, textFont, 1);

        return builder.Build();
    }

    public PdfNotebook CreateNotebook(string folder)
    {
        return new PdfNotebook("Issue #" + issue, Render(), folder);
    }

    private const int hlineMargin = 10;

    private void AddFooter(PdfPageBuilder page, PdfDocumentBuilder.AddedFont textFont, int? pageNum = null)
    {
        page.DrawLine(new PdfPoint(hlineMargin, 20),
            new PdfPoint(page.PageSize.Width - hlineMargin, 20), 1.0f);

        page.AddText("Generated by Totletheyn on Moss", (int)FontSize.Footer, new PdfPoint(hlineMargin, 10), textFont);

        if (pageNum.HasValue)
        {
            page.AddText("Page " + pageNum, (int)FontSize.Footer, new PdfPoint(page.PageSize.Width - hlineMargin - 70, 10), textFont);
        }
    }

    private void AddCoverHeader(PdfPageBuilder page, PdfDocumentBuilder.AddedFont headlineFont, PdfDocumentBuilder.AddedFont textFont)
    {
        var headerText = "Daily E-Book Times";
        var headerLeft = 200;

        var headerLetters = page.AddText(headerText, (int)FontSize.Headline,
            new PdfPoint(headerLeft, page.PageSize.Height - (int)FontSize.Headline), headlineFont);

        page.DrawLine(new PdfPoint(hlineMargin, page.PageSize.Height - headerLetters[0].PointSize - 20),
            new PdfPoint(page.PageSize.Width - hlineMargin, page.PageSize.Height - headerLetters[0].PointSize - 20), 1.0f);

        var headerInfoY = page.PageSize.Height - headerLetters[0].PointSize - 40;
        page.AddText("Issue #" + issue, (int)FontSize.HeaderInfo, new PdfPoint(hlineMargin, headerInfoY), textFont);

        // Date with day of week
        page.AddText(DateTime.Now.ToString("dddd, MMMM dd, yyyy"), (int)FontSize.HeaderInfo,
            new PdfPoint(page.PageSize.Width / 2 - 100, headerInfoY), textFont);

        var rssIconRec = new PdfRectangle(
            page.PageSize.Width - hlineMargin - 50,
            headerInfoY,
            page.PageSize.Width - hlineMargin - 10,
            headerInfoY);
        var rssIcon = page.AddPng(new MemoryStream(File.ReadAllBytes("extension/Assets/images/rss.png")), rssIconRec);
        page.AddImage(rssIcon, rssIconRec);

        page.DrawLine(new PdfPoint(hlineMargin, page.PageSize.Height - headerLetters[0].PointSize - 50),
            new PdfPoint(page.PageSize.Width - hlineMargin, page.PageSize.Height - headerLetters[0].PointSize - 50), 1.0f);
    }
}